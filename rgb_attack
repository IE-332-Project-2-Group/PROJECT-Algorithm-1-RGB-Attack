# Load required libraries and set working directory
library(tidyverse)
library(keras)
library(tensorflow)
library(reticulate)
library(png)

setwd("C:/Users/T A/OneDrive - purdue.edu")

# Load saved model
model_list <- load_model_tf("./dandelion_model/")
model <- model_list

# Set target image size
target_size <- c(224, 224)

# Create empty results dataframe
res <- data.frame(file = character(), class = character(), percent_dandelion = numeric(), percent_dandelions = numeric(), stringsAsFactors = FALSE)

f <- list.files("./grass")
for (i in f) {
  
  # Load image as Keras tensor object
  test_image <- image_load(paste("./grass/", i, sep = ""), target_size = target_size)
  
  # Convert Keras tensor object to numpy array
  test_array <- keras::image_to_array(test_image)
  
  # Reshape array to have a single batch dimension
  test_array <- array_reshape(test_array, c(1, dim(test_array)))
  
  # Normalize array values to range [0, 1]
  test_array <- test_array / 255
  
  # Modify random pixels in the image
  num_pixels <- 224 * 224
  pixels_to_change <- round(num_pixels * 0.01)
  
  # Generate random pixel indices
  pixel_indices <- sample(num_pixels, pixels_to_change, replace = FALSE)
  
  # Change the color of random pixels
  for (j in pixel_indices) {
    row_index <- ceiling(j / 224)
    col_index <- j %% 224
    if (col_index == 0){ col_index <- 224}
    
    # Generate new color values
    r <- runif(1, 0, 1)
    g <- runif(1, 0, 1)
    b <- runif(1, 0, 1)
    
    # Change the color of the pixel
    test_array[1, row_index, col_index, ] <- c(r, g, b)
  }
  
  # Make prediction on modified image
  pred <- model %>% predict(test_array)
  
  # Record results in dataframe
  if (pred[1,2] < 0.50){
    res <- rbind(res, data.frame(file = i, class = "not_grass", percent_dandelion = pred[1,1], percent_grass = 1- pred[1,1]))
  } else {
    res <- rbind(res, data.frame(file = i, class = "grass", percent_dandelion = pred[1,1], percent_grass = 1 - pred[1,1]))
  }
}
# Loop over all images in "dandelions" folder
f <- list.files("./dandelions")
for (i in f) {
  
  # Load image as Keras tensor object
  test_image <- image_load(paste("./dandelions/", i, sep = ""), target_size = target_size)
  
  # Convert Keras tensor object to numpy array
  test_array <- keras::image_to_array(test_image)
  
  # Reshape array to have a single batch dimension
  test_array <- array_reshape(test_array, c(1, dim(test_array)))
  
  # Normalize array values to range [0, 1]
  test_array <- test_array / 255
  
  # Modify random pixels in the image
  num_pixels <- 224 * 224
  pixels_to_change <- round(num_pixels * 0.01)
  
  # Generate random pixel indices
  pixel_indices <- sample(num_pixels, pixels_to_change, replace = FALSE)
  
  # Change the color of random pixels
  for (j in pixel_indices) {
    row_index <- ceiling(j / 224)
    col_index <- j %% 224
    if (col_index == 0){ col_index <- 224}
    
    # Generate new color values
    r <- runif(1, 0, 1)
    g <- runif(1, 0, 1)
    b <- runif(1, 0, 1)
    
    # Change the color of the pixel
    test_array[1, row_index, col_index, ] <- c(r, g, b)
  }
  
  # Make prediction on modified image
  pred <- model %>% predict(test_array)
  
  # Record results in dataframe
  if (pred[1,1] < 0.50){
    res <- rbind(res, data.frame(file = i, class = "not_dandelion", percent_dandelion = pred[1,1], percent_grass = 1 - pred[1,1]))
  } else {
    res <- rbind(res, data.frame(file = i, class = "dandelion", percent_dandelion = pred[1,1], percent_grass = 1 - pred[1,1]))
  }
}
print(res)
View(res)
